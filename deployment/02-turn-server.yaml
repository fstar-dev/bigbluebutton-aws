AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host BigBlueButton on AWS - Creates Turn Server

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Turn Server Parameter
        Parameters:
          - InstanceType
          - DomainName
          - DiskSize
          - SecretId
          - Email
          - EC2KeyName
          - SecurityGroup
          - Subnet
          - EIPAllocationId
    ParameterLabels:
      InstanceType:
        default: Turn Server Instance Type
      DomainName:
        default: Domain Name
      DiskSize:
        default: Disk Size (GiB)
      SecretId:
        default: Secret Id
      Email:
        default: Email
      EC2KeyName:
        default: EC2 Key Name
      SecurityGroup:
        default: Security Group
      Subnet:
        default: Subnet
      EIPAllocationId:
        default: EIP Allocation ID

Parameters:
  InstanceType:
    Description: Choose an instance type of Turn server
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: c5.large
    Type: String
  DomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: The domain of the Turn server
    Type: String
    Default: ''
  DiskSize:
    Description: The Disk size
    Type: Number
    Default: 100
  SecretId:
    Description: The Secret Id to access from BigBlueButton Server
    Type: String
  Email:
    Description: Email for Let's encrypt to generate SSL Certificate
    Type: String
    AllowedPattern: \w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]{2,14}
  EC2KeyName:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
  SecurityGroup:
    Description: Select the security group for Turn server
    Type: AWS::EC2::SecurityGroup::Id
  Subnet:
    Description: Select existing subnet.
    Type: AWS::EC2::Subnet::Id
  EIPAllocationId:
    Description: The Allocation Id of EIP
    Type: String
    AllowedPattern: ^eipalloc-[0-9a-z]*
    Default: 'eipalloc-'

Mappings:
  RegionMap:
    cn-north-1:
      LatestAmiId: "ami-01993b4213b4bffb5"
    cn-northwest-1:
      LatestAmiId: "ami-01d4e30d4d4952d0f"

Conditions:
  CustomDomain: !And [ !Not [ !Equals [ !Ref DomainName, '' ] ],  !Not [ !Equals [ !Ref EIPAllocationId, '' ] ] ]

Resources:

  InstanceRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: AssociateAddress api does not allow ARN other than *
    Type: AWS::IAM::Role
    Condition: CustomDomain
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com.cn
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws-cn:logs:*:*:*
        - PolicyName: AssociateEIP
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CustomDomain
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          server_init:
            - install-fonts
            - download-bbb-install
        install-fonts:
          packages:
            apt:
              fonts-arphic-uming: []
              fonts-wqy-zenhei: []
              fonts-cns11643-kai: []
              fonts-cns11643-sung: []
              fonts-moe-standard-kai: []
              fonts-moe-standard-song: []
              fonts-arphic-bkai00mp: []
              fonts-arphic-bsmi00lp: []
              fonts-arphic-ukai: []
        download-bbb-install:
          packages:
            apt:
              git: []
              nginx: []
          files:
            /tmp/bbb-install.sh:
              source: https://s3.cn-north-1.amazonaws.com.cn/%%BUCKET_NAME%%/%%SOLUTION_NAME%%/%%VERSION%%/bbb-install-2.2.2.sh
              mode: 000500
              owner: root
              group: root
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", LatestAmiId]
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !If [CustomDomain, !Ref InstanceProfile, !Ref "AWS::NoValue"]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref Subnet
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            apt-get update -y
            # Install AWS CLI and associcate EIP
            if [ "${EIPAllocationId}" != "eipalloc-" ]; then
              apt-get install awscli -y
              instanceId=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
              aws ec2 associate-address --allocation-id ${EIPAllocationId} --instance-id $instanceId --region ${AWS::Region}
            fi
            apt-get install -y python-pip
            # Install CloudFormation helper scripts
            wget -O /tmp/aws-cfn-bootstrap-latest.tar.gz https://aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            pip install /tmp/aws-cfn-bootstrap-latest.tar.gz
            /usr/local/bin/cfn-init --configsets server_init --verbose --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
            sed -i "s/# server_names_hash_bucket_size 64;/server_names_hash_bucket_size 128;/" /etc/nginx/nginx.conf
            if [ "${DomainName}" = "" ]; then
              publicIp=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
              sed -i "s/DIG_IP=.*/DIG_IP=\"${!publicIp}\"/" /tmp/bbb-install.sh
              dnsName=`curl -s http://169.254.169.254/latest/meta-data/public-hostname`
              /tmp/bbb-install.sh -c ${!dnsName}:${SecretId} -e ${Email}
            else
              /tmp/bbb-install.sh -c ${DomainName}:${SecretId} -e ${Email}
            fi
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

Outputs:
  TurnServerEndpoint:
    Description: Turn Server Endpoint
    Value:
      !If [ CustomDomain, !Ref DomainName, !GetAtt Instance.PublicDnsName ]

